# lotr 5e metadata gvars
METADATA_CHECK = "856f9b7a-c299-4052-9e7f-5fcba2f919be"
METADATA_SHADOW = "4160bb62-8791-4239-941c-b7805e5351b6"
METADATA_JOURNEY = "a6e3208c-b3c8-408b-b310-43e3daab5332"
METADATA_FATIGUE = "27c1e5d0-26aa-485f-939a-848c826e8386"
METADATA_REWARDS = "017fc259-9575-410d-97b0-2bb753887655"

# lib utils and metadata gvars
UTILS_COMMON = "0c6d5bca-a15d-4e45-a08d-48cf51411088"
METADATA_WEAPON = "c055d535-e757-4730-b70c-6114fdc46614"

# Statuses
STATUS_NORMAL = "Normal"
STATUS_ANGUISHED = "Anguished"
STATUS_MISERABLE = "Miserable"

# Counters
CC_SHADOW_POINTS = "Shadow Points"
CC_SHADOW_SCARS = "Shadow Scars"
CC_SHADOW_PATH = "Shadow Path"

# cvars
LOTR_SKILLS = "lotrSkills"

# snippet params
MULTIPLE_ROLES_PENALTY = -5
BLESSING_DIE = {
    2: "1d4",
    3: "1d6",
    4: "1d8"
}

# footers
FOOTER_SHADOW = "!help lotrshadow for more info | Developed by @noralf#0"
FOOTER_CHECK = "!help lotrcheck for more info | Developed by @noralf#0"
FOOTER_EVENT = "!help lotrevent for more info | Developed by @noralf#0"
FOOTER_FATIGUE = "!help lotrfatigue for more info | Developed by @noralf#0"
FOOTER_FELL = "!help fell for more info | Developed by @noralf#0"
FOOTER_REINFORCED = "!help reinforced for more info | Developed by @noralf#0"
FOOTER_CUNNING_MAKE = "!help cunningmake for more info | Developed by @noralf#0"
FOOTER_ANGUISHED = "!help anguished for more info | Developed by @noralf#0"

using(
    common_utils=UTILS_COMMON
)


def get_shadow_status(ch):
    """Gets current shadow points and state"""
    pts = ch.get_cc(CC_SHADOW_POINTS)

    if pts >= ch.stats.wisdom:
        return pts, STATUS_ANGUISHED
    if pts >= ceil(ch.stats.wisdom / 2):
        return pts, STATUS_MISERABLE
    return pts, STATUS_NORMAL


def create_full_shadow_display(ch, title, prefix_desc=None):
    """Creates the full status display with path and thresholds"""
    shadow_pts = ch.get_cc(CC_SHADOW_POINTS)
    shadow_pts_max = ch.get_cc_max(CC_SHADOW_POINTS)
    shadow_scars = ch.get_cc(CC_SHADOW_SCARS)
    shadow_path = ch.get_cc(CC_SHADOW_PATH)
    shadow_path_max = ch.get_cc_max(CC_SHADOW_PATH)
    total, status = get_shadow_status(ch)
    footer = FOOTER_SHADOW

    # Get calling and path info
    calling, path_data = get_shadow_path(ch)

    desc = (f"**Shadow Path**\n"
            f"* Calling: {calling}\n"
            f"* Path: {path_data['name']}\n"
            f"**Current**\n"
            f"* Shadow Points: {shadow_pts}/{shadow_pts_max}\n"
            f"* Shadow Scars: {shadow_scars}\n"
            f"* Shadow Path: {shadow_path}/{shadow_path_max}\n"
            f"* Flaws: {path_data['flaws'][:shadow_path] if shadow_path else None}\n\n"
            f"* Status: {status}\n\n"
            f"**Shadow Thresholds**\n"
            f"* Miserable at: {ceil(ch.stats.wisdom / 2)} points\n"
            f"* Anguished at: {ch.stats.wisdom} points")
    if prefix_desc:
        desc = f"{prefix_desc}\n\n{desc}"
    return common_utils.embed_msg(title=title, desc=desc, footer=footer)


def create_brief_shadow_display(ch, title, prefix_desc=None):
    """Creates brief shadow status display, optionally with prefix text"""
    shadow_points = ch.get_cc(CC_SHADOW_POINTS)
    shadow_scars = ch.get_cc(CC_SHADOW_SCARS)
    total, status = get_shadow_status(ch)
    footer = FOOTER_SHADOW

    stats = (f"**Current**\n"
             f"* Shadow Points: {shadow_points}/{ch.stats.wisdom}\n"
             f"* Shadow Scars: {shadow_scars}\n"
             f"* Status: {status}")
    if prefix_desc:
        desc = f"{prefix_desc}\n\n{stats}"
    else:
        desc = stats
    return common_utils.embed_msg(title=title, desc=desc, footer=footer)


def validate_shadow(ch):
    """Validates shadow data"""
    required_counters = [CC_SHADOW_POINTS, CC_SHADOW_SCARS, CC_SHADOW_PATH]

    for counter in required_counters:
        if not ch.cc_exists(counter):
            return False, f"Shadow counter `{counter}` not found. Please run `!lotrshadow setup`."

    # Check character has a valid calling
    shadow_data = load_json(get_gvar(METADATA_SHADOW))
    valid_callings = list(shadow_data["paths"].keys())

    calling = None
    for possible_calling in valid_callings:
        if ch.levels.get(possible_calling, 0) > 0:
            calling = possible_calling
            break

    if not calling:
        class_list = [f"{class_name} {level}" for class_name, level in ch.levels]
        current_classes = ", ".join(class_list)
        return False, f"No valid LOTR calling found. Current classes: {current_classes}"

    return True, None


def validate_shadow_source(source):
    """Validates source and amount for shadow resistance"""
    shadow_data = load_json(get_gvar(METADATA_SHADOW))

    if source not in shadow_data["shadowSources"]:
        return False, f"Invalid source. Must be one of: {', '.join(shadow_data['shadowSources'].keys())}", None

    return True, None, shadow_data["shadowSources"][source]


def get_shadow_path(ch):
    """Gets character's calling and path data from metadata"""
    shadow_data = load_json(get_gvar(METADATA_SHADOW))
    first_calling = list(ch.levels)[0][0]
    return first_calling, shadow_data["paths"][first_calling]


def make_lotr_check_roll(character, check, adv=0, bonuses=None):
    """Makes a vroll for a LOTR or standard skill check.

    Args:
        character: Character making check
        check: Skill name (LOTR skill or standard skill)
        adv: Advantage state (-1 dis, 0 normal, 1 adv)
        bonuses: List of bonus strings to add to roll
    Returns:
        SimpleRollResult of the check roll
    Raises:
        ValueError: If skill is not found in LOTR skills or standard skills
    """
    # Load LOTR skill data
    skills_data = load_yaml(get_gvar(METADATA_CHECK))
    char_skills = load_yaml(character.get_cvar(LOTR_SKILLS, '{}'))

    # Build base advantage roll string
    roll_str = "2d20kh1" if adv == 1 else "2d20kl1" if adv == -1 else "1d20"

    # Case 1: LOTR skill
    if check in skills_data['skills']:
        skill_data = skills_data['skills'][check]
        ability = skill_data['ability']

        # Get base ability modifier
        roll_str += f"+{character.stats.get_mod(ability)}"

        # Add proficiency if character has it
        if check in char_skills:
            prof_level = char_skills[check]
            prof_mult, prof_name = common_utils.PROFICIENCY_LEVELS[prof_level]
            if prof_mult > 0:
                prof_bonus = floor(
                    character.stats.prof_bonus * prof_mult) if prof_mult == 0.5 else character.stats.prof_bonus * prof_mult
                roll_str += f'+{prof_bonus}["{prof_name}"]'

    # Case 2: Standard skill
    else:
        try:
            roll_str += f"+{character.skills[check]}"
        except:
            raise ValueError(f"Check {check} not found in LOTR skills or standard skills")

    # Add any additional bonuses
    if bonuses:
        roll_str += "+" + "+".join(bonuses)

    return vroll(roll_str)


def get_blessing_die(character):
    return BLESSING_DIE.get(character.stats.prof_bonus)


def add_ac_bonus_effect(ch, targets, reward_key, rewards_data, footer):
    """Adds an AC bonus effect to target(s) in combat.

    Args:
        ch: Character making the effect
        targets: List of target names (or None for self)
        reward_key: Key in rewards_data for this reward
        rewards_data: The rewards data dictionary
        footer: Footer string for output

    Returns:
        Formatted embed message
    """
    # Get command data
    cmd_data = rewards_data[reward_key]['command_data']
    effect_str = f"{cmd_data['effect_name']} (+{cmd_data['bonus']} AC)"

    # Validate combat
    c = combat()
    if not c:
        return common_utils.embed_msg(
            title="Error: Not in Combat",
            desc="Effects can only be added to a target in combat.",
            footer=footer
        )

    # Process targets (or self)
    targets = targets if targets else [ch.name]
    desc = []
    successful_targets = []

    for target in targets:
        # Get target combatant
        combatant = c.get_combatant(target)
        if not combatant:
            desc.append(f"Error: Target `{target}` not found in combat.")
            continue

        # Check existing effect
        if combatant.get_effect(effect_str):
            desc.append(f"{target} already has the {cmd_data['effect_name']} effect.")
            continue

        # Create effect
        passive_effects = {"ac_bonus": cmd_data['bonus']}
        buttons = [{
            "label": cmd_data['button_label'],
            "verb": cmd_data['button_verb'],
            "style": 4,
            "automation": [{"type": "remove_ieffect"}]
        }]

        # Add effect
        effect = combatant.add_effect(
            effect_str,
            passive_effects=passive_effects,
            buttons=buttons,
            desc=rewards_data[reward_key]['field_text']
        )

        desc.append(f"Added effect `{effect_str}` to {target}")
        successful_targets.append(target)

    # Build output
    if not successful_targets:
        title = "No effects added!"
    else:
        title = f"{' and '.join(successful_targets)} {'is' if len(successful_targets) == 1 else 'are'} protected by {cmd_data['effect_name']}!"

    return common_utils.embed_msg(
        title=title,
        desc="\n".join(desc),
        footer=footer
    )