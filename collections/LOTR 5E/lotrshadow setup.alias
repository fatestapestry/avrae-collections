<drac2>
# Shadow Setup Tool for LOTR 5E
shadow_data = load_json(get_gvar("4160bb62-8791-4239-941c-b7805e5351b6"))
using(
    lotr_utils="bf283fd7-585d-4530-b0e2-9e03eb643a96",
    common_utils="0c6d5bca-a15d-4e45-a08d-48cf51411088",
)
footer = lotr_utils.FOOTER_SHADOW

# Parse args properly
args = argparse(&ARGS&)
override = args.get('override')

# Get character info
ch = character()

# Validate character has a valid LOTR calling
valid_callings = list(shadow_data["paths"].keys())
calling = None
for possible_calling in valid_callings:
    if ch.levels.get(possible_calling, 0) > 0:
        calling = possible_calling
        break

if not calling:
    # Build error message
    class_list = [f"{class_name} {level}" for class_name, level in ch.levels]
    current_classes = ", ".join(class_list)

    calling_list = [f"â€¢ {c}: {shadow_data['paths'][c]['name']}"
                    for c in valid_callings]
    valid_calling_str = "\n".join(calling_list)

    return common_utils.embed_msg(
        title="Shadow Setup Error - No Valid Calling Found",
        desc=f"{ch.name} currently has levels in: {current_classes}\n\n"
             f"To use the Shadow system, you need levels in one of the following LOTR 5E callings:\n"
             f"{valid_calling_str}\n\n"
             f"Note: This tool is specifically for The Lord of the Rings Roleplaying 5E",
        footer=footer
    )

# Setup all shadow counters
for k, data in shadow_data["counters"].items():
    if override:
        ch.create_cc(**data)
    else:
        ch.create_cc_nx(**data)

# Build output description 
title = f"{ch.name}'s Shadow Setup Completed"
return lotr_utils.create_full_shadow_display(ch, title)
</drac2>
