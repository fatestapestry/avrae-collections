<drac2>
ch, out, chks = character(), get_gvar("82433f32-d46d-4e22-9673-0cb9befc555e"), get('checks', {})
chks = load_json(chks.replace("'",'"') if "'" in chks else chks) if chks else {}
if not chks:
  return out

if typeof(chks) in 'SafeList':
  chks = {x.name.lower():x for x in chks}
  ch.set_cvar('checks',dump_json(chks))
elif typeof(chks) not in 'SafeDict':
  err('Your `checks` character variable (cvar) is not formatted correctly. Use `!cvar checks` to look at it or `!cvar delete checks` to start fresh.')

args = &ARGS&
if not args:
  return out + ' -f "*You have not specified which check to make.\nChoose one of the checks above or a default 5E check.*"'

a = ''.join(args[0].lower().split())
c = [chks[x] for x in chks if a == x and 'minprof' not in x]
if len(c) == 0:
  c = [chks[x] for x in chks if a in x and 'minprof' not in x]
if len(c) == 0:
  d = {x:y.prof for x,y in ch.skills if a == x.lower()}
  if len(d) == 0:
    d = {x:y.prof for x,y in ch.skills if a in x.lower()}
  if len(d) == 0:
    return out + ' -f "_None of the default or custom checks match the input **' + args[0] + '**.\nRemember: you must use a unique part of the check name._"'
  if len(d) > 1:
      return out + ' -f "_More than one default check matches the input **' + args[0] + '**:\n' + ', '.join(d.keys()).title() + '.\nRemember: you must use a unique part of the check name._"'
  d = list(d.keys())[0]
  prof = float(ch.skills[d].prof)
  return ' '.join(['check',d] + args + (['-b', str(int(floor(float(chks.minprof)*proficiencyBonus)))] if 'minprof' in chks and prof < 1 else []) + (['-mc', chks.minprofroll] if 'minprofroll' in chks and prof >= 1 else []))
elif len(c) > 1:
  return out + ' -f "_More than one custom check matches the input **' + args[0] + '**:\n' + ', '.join([x.name for x in c]).title() + '.\nRemember: you must use a unique part of the check name._"'

c = c[0]
stats = {'int':'Intelligence','wis':'Wisdom','cha':'Charisma','str':'Strength','dex':'Dexterity','con':'Constitution'}
altstat = ([''] + [stats[x] for x in args[1:] if x in stats]).pop() if len(args) > 1 else ''
cname = f'{altstat} ({c.name})' if altstat else c.name
out = ['check', c.base, '-title "[name] makes a' + ('n' if cname[0].lower() in 'aeiou' else ''), cname, 'check!"']

prof = float(c.prof)
if 'minprof' in chks and prof < 1:
  prof = float(chks['minprof'])

if prof:
  out += ['-b', str(int(floor(prof*proficiencyBonus)))]

if 'minprofroll' in chks and prof >= 1:
  out += ['-mc', chks.minprofroll]

if c.args:
  out += c.args

if args[1:]:
  out += args[1:]

return ' '.join(out)
</drac2>