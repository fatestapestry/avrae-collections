<drac2>
# Load data
journey_data = load_json(get_gvar("a6e3208c-b3c8-408b-b310-43e3daab5332"))
using(
   common_utils="0c6d5bca-a15d-4e45-a08d-48cf51411088",
   lotr_utils="bf283fd7-585d-4530-b0e2-9e03eb643a96"
)
footer = lotr_utils.FOOTER_EVENT

# Get character context
ch = character()

# Parse arguments and validate required positionals
args = argparse(&ARGS&)

try:
   pargs = &ARGS&[:2]
   role = pargs[0].lower()
   event = pargs[1].lower()
except:
    title = "Error"
    desc = "Usage: `!lotrevent <role> <event> [args]`"
    return common_utils.embed_msg(title=title, desc=desc, footer=footer)

# Get valid roles (filter for ones with event_id)
valid_roles = {k:v for k,v in journey_data['roles'].items() if 'event_id' in v}

# Validate role
if role not in valid_roles:
    title = "Error"
    desc = (f"Invalid role `{role}`.\n"
            f"Must be one of: `{[r for r in valid_roles.keys()]}`")
    return common_utils.embed_msg(title=title, desc=desc, footer=footer)

# Build event lookup options (names and abbreviations)
event_lookup = {}
for event_name, event_data in journey_data['events'].items():
    event_lookup[event_name] = event_name
    event_lookup[event_data['abbr']] = event_name

# Validate event and get full event name
if event not in event_lookup:
    title = "Error"
    valid_events = [f"{k}|{v['abbr']}" for k,v in journey_data['events'].items()]
    desc = (f"Invalid event `{event}`.\n"
            f"Must be one of: `{valid_events}`")
    return common_utils.embed_msg(title=title, desc=desc, footer=footer)

event_name = event_lookup[event]
event_data = journey_data['events'][event_name]

# Determine DC
dc = journey_data['terrain']['openterrain']['dc']  # Default DC
dc_source = journey_data['terrain']['openterrain']
dc_override = False

if args.get('terrain'):
    terrain = args.last('terrain')
    if terrain not in journey_data['terrain']:
        title = "Validation Error"
        desc = (f"Invalid terrain `{terrain}`.\n"
                f"Must be one of: `{[t for t in journey_data['terrain'].keys()]}`")
        return common_utils.embed_msg(title=title, desc=desc, footer=footer)
    dc = journey_data['terrain'][terrain]['dc']
    dc_source = journey_data['terrain'][terrain]

if args.get('dc'):
    try:
        dc = int(args.last('dc'))
        dc_override = True
    except:
        title = "Validation Error"
        desc = "Invalid DC value"
        return common_utils.embed_msg(title=title, desc=desc, footer=footer)

# Check for advantage/disadvantage, incl season override
adv = args.adv()
adv_override = False
if 'autumn' in args or 'winter' in args:
    adv = -1
    adv_override = True

# Build bonuses list
bonuses = []
if 'multipleroles' in args:
    bonuses.append(f"{lotr_utils.MULTIPLE_ROLES_PENALTY}[Multiple Roles]")

if 'blessingdie' in args:
    blessing_die = lotr_utils.get_blessing_die(ch)
    if blessing_die:
        bonuses.append(f"{blessing_die}[Blessing Die]")

if args.get('b'):
    bonuses.append(args.last('b'))

# Make skill check
skill = journey_data['roles'][role]['skill']
check_result = lotr_utils.make_lotr_check_roll(ch, skill, adv=adv, bonuses=bonuses)
success = check_result.total >= dc

# Build output
desc_lines = [
    f'*{ch.name} makes a {skill.title()} check!*\n',
    f'**DC {dc}**' + (' (overridden)' if dc_override else ''),
    str(check_result),
    "**Success!**" if success else "**Failure!**"
]
title = f"{ch.name} faces a {event_data['field_title']} event!"
desc = '\n'.join(desc_lines)

# Build fields
fields = []
if not dc_override:
    fields.append(f"{dc_source['title']}|{dc_source['desc']}")
if adv_override:
    fields.append(f"Cold Season|The d20 Test has disadvantage if it is autumn or winter.")
fields.append(f"{event_data['field_title']}|{event_data['field_text']}")

return common_utils.embed_msg(title=title, desc=desc, footer=footer, fields=fields)
</drac2>